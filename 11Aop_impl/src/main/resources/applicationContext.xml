<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 注册bean -->
    <!-- 这边配置的是一个具体的接口实现对象 但是取出返回的时候返回的是接口 -->
    <bean id="userServiceImpl" class="com.wq.service.UserServiceImpl"/>
    <!-- 前置切面 -->
    <bean id="log" class="com.wq.log.Log"/>
    <!-- 后置切面 -->
    <bean id="afterLog" class="com.wq.log.AfterLog"/>

    <!-- 配置AOP:需要导入AOP的约束
     xmlns:aop="http://www.springframework.org/schema/aop"
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop.xsd
     -->

<!--    &lt;!&ndash; 方式一:使用原生的Spring API接口 &ndash;&gt;-->
<!--    &lt;!&ndash; aop配置标签 &ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 1.切入点:需要在哪个地方去执行-->
<!--        id:给切入点命名 方便后面引用-->
<!--        expression:表达式-->
<!--        execution(切入的位置表达式 *[public等] *[返回值] *[类名] *[方法名] *[参数])-->
<!--        execution       [类名]传入一个接口实现类     该类下的所有方法  参数列表-->
<!--        execution(* com.wq.service.UserServiceImpl.       *          (..))-->
<!--        &ndash;&gt;-->
<!--        <aop:pointcut id="pointcut_name" expression="execution(* com.wq.service.UserServiceImpl.*(..))"/>-->
<!--        &lt;!&ndash; 2.[执行环绕增强]!!!-->
<!--             advice-ref:切面对象名-->
<!--             pointcut-ref:切入点-->
<!--        &ndash;&gt;-->
            <!-- 前置切面设置 -->
<!--        <aop:advisor advice-ref="log" pointcut-ref="pointcut_name"/>-->
            <!-- 后置切面设置 -->
<!--        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut_name"/>-->
<!--    </aop:config>-->

<!--    &lt;!&ndash; 方式二:使用自定义的切面类 &ndash;&gt;-->
<!--    &lt;!&ndash; 1.注册自定义的切面类(也可以使用ComponentScan) &ndash;&gt;-->
<!--    <bean id="diy_pointCut" class="com.wq.diy.DiyPointCut"/>-->
<!--    &lt;!&ndash; 2.aop配置标签 &ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 3.引用自定义的切面类 &ndash;&gt;-->
<!--        <aop:aspect ref="diy_pointCut">-->
<!--            &lt;!&ndash; 4.设置切入点 &ndash;&gt;-->
                <!--&lt;!&ndash; 方式二优势之一:这里定义一个切入点可以复用!!!-->
<!--            <aop:pointcut id="pointcut_name" expression="execution(* com.wq.service.UserServiceImpl.*(..))"/>-->
<!--            &lt;!&ndash; 5.使用通知(advice 就是方法) &ndash;&gt;-->
<!--            &lt;!&ndash; 5.1 前置切面方法(通知)设置-->
<!--                     method 要引用的前置切面方法(通知)-->
<!--                     pointcut 对应的切入点-->
<!--            &ndash;&gt;-->
<!--            <aop:before method="before_PointCut_Advice" pointcut-ref="pointcut_name"/>-->
<!--            &lt;!&ndash; 5.2 后置置切面方法(通知)设置-->
<!--                     method要引用的前置切面方法(通知)-->
<!--                     pointcut 对应的切入点-->
<!--            &ndash;&gt;-->
<!--            <aop:after-returning method="after_PointCut_Advice" pointcut-ref="pointcut_name"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->
    <!-- 方式三:使用注解方式定义切面类以及advice -->
    <!-- 1.注册切面类bean
         切面类里面已经定义了 切入点
         也用注解方式定义了切面及对应的advice
         只需要再开启AOP对注解的支持就可以了
    -->
    <bean id="annotationPointCut" class="com.wq.diy.AnnotationPointCut"/>
    <!-- 开启AOP 自动代理 对注解方式定义的支持 -->
    <!-- proxy-target-class="false" 基于JDK实现动态代理 -->
    <!-- proxy-target-class="true" 基于cglib实现动态代理 -->
    <!-- 结果没有任何区别,一般不使用这个参数-->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

</beans>